<project name="Ceylon AST" basedir="." default="test">

    <property file="build.properties" />
    <property name="ceylon.verbosity" value="false"/>
    <property name="ceylon.executable" value="${dist.bin.dir}/ceylon"/>
    <property name="out.repo" location="modules"/>
    
    <!-- Local repository -->
    <property name="ceylon.repo.dir" location="${user.home}/.ceylon/repo" />
    
    <path id="ant-tasks">
        <pathelement location="${dist.libs.dir}/ceylon-ant.jar"/>
    </path>
    
    <typedef resource="com/redhat/ceylon/ant/antlib.xml" classpathref="ant-tasks"/>
    
    <moduleset id="modules.source.ceylon">
        <module name="ceylon.ast.core"/> 
        <module name="ceylon.ast.create"/> 
        <module name="ceylon.ast.samples"/> 
    </moduleset>
    <moduleset id="modules.source.jvm">
        <moduleset refid="modules.source.ceylon"/> 
        <module name="ceylon.ast.redhat"/> 
    </moduleset>
    <moduleset id="modules.source.js">
        <moduleset refid="modules.source.ceylon"/> 
    </moduleset>
    <moduleset id="modules.source.all">
        <moduleset refid="modules.source.jvm"/> 
        <moduleset refid="modules.source.js"/> 
    </moduleset>
    
    <moduleset id="modules.test.ceylon">
        <module name="test.ceylon.ast.core"/> 
        <module name="test.ceylon.ast.create"/> 
    </moduleset>
    <moduleset id="modules.test.jvm">
        <moduleset refid="modules.test.ceylon"/>
        <module name="test.ceylon.ast.redhat"/> 
        <module name="test.ceylon.ast.samples"/> 
    </moduleset>
    <moduleset id="modules.test.js">
        <moduleset refid="modules.test.ceylon"/>
    </moduleset>
    
    <moduleset id="modules.all.ceylon">
        <moduleset refid="modules.source.ceylon"/>
        <moduleset refid="modules.test.ceylon"/>
    </moduleset>
    <moduleset id="modules.all.jvm">
        <moduleset refid="modules.source.jvm"/>
        <moduleset refid="modules.test.jvm"/>
    </moduleset>
    <moduleset id="modules.all.js">
        <moduleset refid="modules.source.js"/>
        <moduleset refid="modules.test.js"/>
    </moduleset>
    
    <moduleset id="modules.source-gen">
         <module name="source_gen.ceylon.ast"/>
    </moduleset>
    
    <target name="clean"
        description="Deletes the modules directory">
        <delete dir="${out.repo}"/>
    </target>

    <target name="compile-source-jvm"
            description="Compiles the Ceylon AST modules for the JVM backend">
        <ceylon-compile executable="${ceylon.executable}"
            verbose="${ceylon.verbosity}"
            encoding="UTF-8"
            out="${out.repo}"
            pack200="true"> 
            <moduleset refid="modules.source.jvm"/>
        </ceylon-compile>
    </target>

    <target name="compile-source-js"
            description="Compiles the Ceylon AST modules for the JS backend">
        <ceylon-compile-js executable="${ceylon.executable}"
            verbose="${ceylon.verbosity}"
            encoding="UTF-8"
            out="${out.repo}"> 
            <moduleset refid="modules.source.js"/>
        </ceylon-compile-js>
    </target>
    
    <target name="compile-test-jvm" depends="compile-source-jvm"
        description="Compiles the Ceylon AST test modules for the JVM backend">
        <ceylon-compile executable="${ceylon.executable}"
            verbose="${ceylon.verbosity}"
            encoding="UTF-8"
            out="${out.repo}"
            pack200="true">
            <moduleset refid="modules.test.jvm"/>
        </ceylon-compile>
    </target>
    
    <target name="compile-test-js" depends="compile-source-js"
        description="Compiles the Ceylon AST test modules for the JS backend">
        <ceylon-compile-js executable="${ceylon.executable}"
            verbose="${ceylon.verbosity}"
            encoding="UTF-8"
            out="${out.repo}">
            <moduleset refid="modules.test.js"/>
        </ceylon-compile-js>
    </target>
    
    <target name="compile-jvm"
        description="Compiles all the Ceylon AST modules for the JVM backend">
        <ceylon-compile executable="${ceylon.executable}"
            verbose="${ceylon.verbosity}"
            encoding="UTF-8"
            out="${out.repo}"
            pack200="true">
            <moduleset refid="modules.all.jvm"/>
        </ceylon-compile>
    </target>
    
    <target name="compile-js"
        description="Compiles all the Ceylon AST modules for the JS backend">
        <ceylon-compile-js executable="${ceylon.executable}"
            verbose="${ceylon.verbosity}"
            encoding="UTF-8"
            out="${out.repo}">
            <moduleset refid="modules.all.js"/>
        </ceylon-compile-js>
    </target>
    
    <target name="compile" depends="compile-jvm,compile-js"
        description="Compiles all the Ceylon AST modules"/>
    
    <target name="compile-source-gen"
        description="Compiles the Ceylon AST source-gen module">
        <ceylon-compile executable="${ceylon.executable}"
            src="source-gen"
            verbose="${ceylon.verbosity}"
            encoding="UTF-8"
            out="${out.repo}"
            pack200="true">
            <moduleset refid="modules.source-gen"/>
        </ceylon-compile>
    </target>
    
    <target name="csg" depends="compile-source-gen"
        description="A shortcut for compile-source-gen"/>
    
    <target name="test-jvm" depends="compile-jvm"
        description="Tests all the Ceylon AST modules for the JVM backend">
        <ceylon-test>
            <moduleset refid="modules.test.jvm"/>
        </ceylon-test>
    </target>

    <target name="test-js" depends="compile-js"
        description="Tests all the Ceylon AST modules for the JS backend">
        <ceylon-test-js>
            <moduleset refid="modules.test.js"/>
        </ceylon-test-js>
    </target>

    <target name="test" depends="test-jvm,test-js"
        description="Test all the Ceylon AST modules"/>
    
    <target name="doc" 
            description="Documents the Ceylon AST modules">
        <ceylon-doc executable="${ceylon.executable}"
            includesourcecode="true"
            nomtimecheck="true"
            encoding="UTF-8">
            <moduleset refid="modules.source.all"/>
            <linkset>
                <link pattern="ceylon" url="https://modules.ceylon-lang.org/repo/1/"/>
            </linkset>
        </ceylon-doc>
        
    </target>

    <target name="publish-jvm" depends="compile-source-jvm"
        description="Copies the Ceylon AST modules for the JVM backend to the user's repository">
        <copy todir="${ceylon.repo.dir}" overwrite="true">
            <fileset dir="${out.repo}">
                <include name="ceylon/ast/**"/>
            </fileset>
        </copy>
    </target>

    <target name="publish-js" depends="compile-source-js"
        description="Copies the Ceylon AST modules for the JS backend to the user's repository">
        <copy todir="${ceylon.repo.dir}" overwrite="true">
            <fileset dir="${out.repo}">
                <include name="ceylon/ast/**"/>
            </fileset>
        </copy>
    </target>
    
    <target name="publish" depends="publish-jvm,publish-js"
        description="Copies the Ceylon AST modules to the user's repository"/>

    <target name="publish-herd">
        <fail message="Please specify a target Herd upload repo url with -Dherd.repo=..." unless="herd.repo"/>
        <fail message="Please specify a target Herd user name with -Dherd.user=..." unless="herd.user"/>
        <fail message="Please specify a target Herd password with -Dherd.pass=..." unless="herd.pass"/>
        
        <ceylon-compile executable="${ceylon.executable}"
            verbose="${ceylon.verbosity}"
            out="${herd.repo}"
            user="${herd.user}"
            pass="${herd.pass}"
            encoding="UTF-8">
            <moduleset refid="modules.source.jvm"/>
        </ceylon-compile>
        
        <ceylon-compile-js executable="${ceylon.executable}"
            verbose="${ceylon.verbosity}"
            out="${herd.repo}"
            user="${herd.user}"
            pass="${herd.pass}"
            encoding="UTF-8">
            <moduleset refid="modules.source.js"/>
        </ceylon-compile-js>
        
        <ceylon-doc executable="${ceylon.executable}"
            includesourcecode="true"
            nomtimecheck="true"
            out="${herd.repo}"
            user="${herd.user}"
            pass="${herd.pass}"
            encoding="UTF-8">
            <moduleset refid="modules.source.all"/>
            <linkset>
                <link pattern="ceylon" url="https://modules.ceylon-lang.org/repo/1/"/>
            </linkset>
        </ceylon-doc>
        
    </target>

    <property name="jacoco.dir" location="lib"/>
    <property name="jacoco.tmp.file" location="${jacoco.dir}/jacoco.zip"/>
    <property name="jacoco.agent.jar" location="${jacoco.dir}/jacocoagent.jar"/>
    <property name="jacoco.ant.jar" location="${jacoco.dir}/jacocoant.jar"/>
    <property name="jacoco.exec.file" location="jacoco.exec"/>
    <property name="jacoco.classes.dir" location="classes"/>
    <property name="jacoco.report.dir" location="coverage"/>

    <target name="coverage-install"
            description="Dowloads the latest JaCoCo build and extracts the libraries into the ${jacoco.dir} directory">
        <mkdir dir="${jacoco.dir}"/>
        <get src="https://oss.sonatype.org/service/local/artifact/maven/redirect?r=snapshots&amp;g=org.jacoco&amp;a=jacoco&amp;e=zip&amp;v=LATEST"
             dest="${jacoco.tmp.file}"/>
        <unzip src="${jacoco.tmp.file}"
               dest="${jacoco.dir}">
            <patternset>
                <include name="lib/*.jar"/>
            </patternset>
            <mapper type="flatten"/>
        </unzip>
        <delete file="${jacoco.tmp.file}"/>
    </target>

    <target name="coverage-uninstall"
            description="Removes the JaCoCo libraries from the ${jacoco.dir} directory">
        <!-- remove the JaCoCo files -->
        <delete>
            <fileset dir="${jacoco.dir}" includes="*jacoco*.jar"/>
        </delete>
        <!-- and if there was nothing else in the directory, remove it as well -->
        <delete includeemptydirs="true">
            <fileset dir="${jacoco.dir}">
                <size value="0"/>
            </fileset>
        </delete>
    </target>

    <target name="coverage-test" depends="compile-jvm"
            description="Runs the tests with JaCoCo attached">
        <fail message="JaCoCo agent not found; try running ‘ant coverage-install’.">
            <condition>
                <not>
                    <available file="${jacoco.agent.jar}"/>
                </not>
            </condition>
        </fail>
        <!--
            We have to run Java with a special JVM option to add the JaCoCo Java Agent.
            The ceylon-test ant task doesn’t support that, but luckily the 'ceylon test' tool does:
            Set the JAVA_OPTS environment variable.
        -->
        <exec executable="ceylon">
            <arg value="test"/>
            <arg value="test.ceylon.ast.core"/>
        	<arg value="test.ceylon.ast.create"/>
            <arg value="test.ceylon.ast.redhat"/>
            <arg value="test.ceylon.ast.samples"/>
            <env key="JAVA_OPTS" value="-javaagent:${jacoco.agent.jar}=destfile=${jacoco.exec.file},append=false"/>
        </exec>
    </target>

    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml"
             onerror="ignore"> <!-- we’ll check in coverage-report if the jar is present or not -->
        <classpath path="${jacoco.ant.jar}"/>
    </taskdef>
        
    <target name="coverage-report"
            description="Generates the JaCoCo coverage report">
        <fail message="JaCoCo libraries not found; try running ‘ant coverage-install’.">
            <condition>
                <not>
                    <available file="${jacoco.ant.jar}"/>
                </not>
            </condition>
        </fail>
        
        <!-- the report generator needs the class files extracted -->
        <unzip dest="${jacoco.classes.dir}">
            <fileset dir="modules">
                <include name="**/*.car"/>
            </fileset>
            <patternset>
                <include name="**/*.class"/>
            </patternset>
        </unzip>
        
        <jacoco:report xmlns:jacoco="antlib:org.jacoco.ant">
            <executiondata>
                <file file="${jacoco.exec.file}"/>
            </executiondata>
            
            <structure name="ceylon.ast">
                <classfiles>
                    <fileset dir="${jacoco.classes.dir}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="source">
                        <include name="**/*.ceylon"/>
                    </fileset>
                </sourcefiles>
            </structure>
            
            <html destdir="${jacoco.report.dir}"/>
            <csv destfile="${jacoco.report.dir}/report.csv"/>
            <xml destfile="${jacoco.report.dir}/report.xml"/>
        </jacoco:report>
    </target>

    <target name="coverage-show"
            description="Opens the JaCoCo coverage report in Firefox">
        <exec executable="firefox">
            <arg file="${jacoco.report.dir}/index.html"/>
        </exec>
    </target>

    <target name="coverage-clean-intermediate"
            description="Deletes the raw coverage data">
        <delete file="${jacoco.exec.file}"/>
    </target>
    <target name="coverage-clean" depends="coverage-clean-intermediate"
            description="Deletes all coverage data">
        <delete dir="${jacoco.report.dir}"/>
    </target>

    <target name="coverage" depends="coverage-test,coverage-report,coverage-clean-intermediate,coverage-show"
            description="Runs the tests with JaCoCo attached and shows a report"/>

</project>
